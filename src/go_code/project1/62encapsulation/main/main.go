package main

import (
	"fmt"
	"go_code/project1/62encapsulation/model"
)

func main() {
	per := model.NewPerson("tom")
	per.SetAge(22)
	fmt.Println(per.GetAge())
}

//封装
// 封装就是把抽象的字段和对字段的操作封装在一起，数据被保护在内部，程序的其他包只有通过被授权的操作(方法)，才能对字段进行操作。
// //好处
// (1)隐藏实现细节
// (2)可以对数据进行验证，保证安全合理
// //如何实现封装
// 1)对结构体中的属性进行封装
// 2)通过方法、包进行封装
// //封装的实现步骤
// 1)将结构体、字段(属性)的首字母小写(不能导出了，其他包不能使用，类似private)
// 2)将结构体所在的包提供一个工厂模式函数，首字母大写。类似一个构造函数
// 3)提供一个首字母大写的Set方法(类似public)，用于对属性进行判断并赋值
//  func(var 结构体类型名)SetXxx(参数列表)(返回值列表){
// 	 //加入数据验证逻辑
// 	 var 字段 = 参数
//  }
//  4)提供一个首字母大写的Get方法，用于获取属性的值
//  func(var 结构体类型名)GetXxx()返回值类型{
// 	 return var.age
//  }
//  //特别说明：在Golang开发中并没有特别强调封装，这点并不像java，不用总是用java的语言特性来看待Golang，Golang本身对面向对象的特性做了简化
