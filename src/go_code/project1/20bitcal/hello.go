package main

import "fmt"

func main() {
	//位运算符
	fmt.Println(2 & 3)
	//2:0000 0010(补码)
	//3:0000 0011(补码)
	// 	0000 0010 =>2
	fmt.Println(2 | 3)
	//2:0000 0010(补码)
	//3:0000 0011(补码)
	//  0000 0011 =>3
	fmt.Println("--", -2&3)
	// -2:原码 1000 0010
	//    反码 1111 1101
	//    补码 1111 1110
	// 3  补码 0000 0011
	// 		   0000 0010 =>2,如果得到的补码是整数不需要转原码，即为结果，如果是负数1则需要反过来转化成原码

	fmt.Println(-2 >> 2)
	// -2
	// 原码 1000 0010
	// 反码 1111 1101
	// 补码 1111 1110
	// 		右移2位后结果 :11 1111
	// 		低位溢出，符号位不变，并用符号位补溢出位：1111 1111
	// 		结果的反码：1111 1110
	// 		结果的原码(结果)  1000 0001 ==> -1

	// 右移位>>：低位溢出，符号位不变，并用符号位补溢出的高位
	// 左移位<<：符号位不变，低位补0

	fmt.Println(-2 << 2)
	// -2
	// 原码 1000 0010
	// 反码 1111 1101
	// 补码 1111 1110
	//    左移2位的结果:11 1110
	//    符号位不变，低位补0 结果：1111 1000
	//    结果的反码：1111 0111
	//    结果的原码：1000 1000 => -8

	var i int8 = 127             //0111 1111
	fmt.Println("有符号位左移位", i<<2) //1111 1100

	var i1 uint8 = 127
	fmt.Println("无符号位左移位", i1<<2) //0011 1111

}

// //原码，反码，补码
// 对于有符号而言
// 1)二进制的最高位是符号位：0表示正数，1表示负数
// 2)正数的原码，反码，补码都一样
// 3)负数的反码=它的原码符号位不变，其他位数取反
// 4)负数的补码=它的反码+1
// 5)0的反码，补码都是0
// 6)在计算机运算的时候，都是以补码的方式来运算的

// //位运算符和移位运算符
// Golang中有3个位运算符
// 分别是 按位与&、按位或|、按位异或^
// 按位与：两位全为1，结果为1，否则为0
// 按位或：两位有一个为1，结果为1，否则为0
// 按位异或：两位一个为0，一个为1，结果为1，否则为0
