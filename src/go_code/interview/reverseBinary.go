package main

func main() {
	var bef = 43261596
	reverseBits(uint32(bef))
}

func reverseBits(num uint32) uint32 {
	var ret uint32 = 0
	//注意十进制的反转，不是二进制的反转 不能简单的用十进制的反转来实现，23 =>32 底层 1 0111  =>  10 0000
	for i := 0; i < 32; i++ {
		final := num & 1   //任何数与1与都是他本身，与0与都是0,num&1得到最后一个二进制位数字
		final <<= (31 - i) //往右移1位相当于乘以2,所以此处要进行一个右移位操作，将后面的数字放到前面
		//10000000000000000000000
		//01000000000000000000000
		ret |= final //将前面的数字进行或操作，即可将所有位链接在一起
		num >>= 1    //每次遍历完都向右移动一位
	}
	return ret
}

//【190】颠倒给定的32位无符号整数的二进制位
//按位&1操作就能得到当前位
